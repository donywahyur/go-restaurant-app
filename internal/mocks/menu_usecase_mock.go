// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/menu.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "go-restaurant-app/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMenuUsecase is a mock of MenuUsecase interface.
type MockMenuUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMenuUsecaseMockRecorder
}

// MockMenuUsecaseMockRecorder is the mock recorder for MockMenuUsecase.
type MockMenuUsecaseMockRecorder struct {
	mock *MockMenuUsecase
}

// NewMockMenuUsecase creates a new mock instance.
func NewMockMenuUsecase(ctrl *gomock.Controller) *MockMenuUsecase {
	mock := &MockMenuUsecase{ctrl: ctrl}
	mock.recorder = &MockMenuUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuUsecase) EXPECT() *MockMenuUsecaseMockRecorder {
	return m.recorder
}

// GetMenuByOrderCode mocks base method.
func (m *MockMenuUsecase) GetMenuByOrderCode(ctx context.Context, orderCode string) (model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuByOrderCode", ctx, orderCode)
	ret0, _ := ret[0].(model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuByOrderCode indicates an expected call of GetMenuByOrderCode.
func (mr *MockMenuUsecaseMockRecorder) GetMenuByOrderCode(ctx, orderCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuByOrderCode", reflect.TypeOf((*MockMenuUsecase)(nil).GetMenuByOrderCode), ctx, orderCode)
}

// GetMenuByType mocks base method.
func (m *MockMenuUsecase) GetMenuByType(ctx context.Context, menuType string) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuByType", ctx, menuType)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuByType indicates an expected call of GetMenuByType.
func (mr *MockMenuUsecaseMockRecorder) GetMenuByType(ctx, menuType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuByType", reflect.TypeOf((*MockMenuUsecase)(nil).GetMenuByType), ctx, menuType)
}
